/** @format */
import { Typography } from 'antd';

const { Paragraph, Text } = Typography;
export const Components_Props = () => {
  return (
    <>
      <div className="content" style={{ overflowY: 'scroll' }}>
        <h1 className="title">Компоненты и пропсы</h1>
        <p className="content_wrapper">
          Компоненты в React по способу создания разделяют на классовые –
          объявленные как классы. И функциональные – как функции. Так же
          компоненты разделяют на stateless – компоненты которые не несут в себе
          какой-либо логики, кроме отрисовки. И statefull – компоненты которые
          помимо отрисовки несут в себе какую-то логику (например обработку
          событий или получение данных с сервера) имеют состояние. По типу
          управления компоненты бывают управляемыми и неуправляемыми. В
          управляемых компонентах данные форм (form, input) обрабатываются самим
          компонентом (с помощью обработчиков) и они хранятся в state
          компонента. В неуправляемых компонентах данных формы хранятся в DOM и
          вместо того чтобы писать обработчик события для каждого поля input мы
          можем считывать эти данные прямо из DOM с помощью{' '}
          <Paragraph style={{ margin: '0', display: 'inline' }}>
            <Text keyboard>Ref</Text>
          </Paragraph>{' '}
          Ref можем считывать эти данные прямо из DOM с помощью{' '}
          <Paragraph style={{ margin: '0', display: 'inline' }}>
            <Text keyboard>React.createRef()</Text>
          </Paragraph>
          или
          <Paragraph style={{ margin: '0', display: 'inline' }}>
            <Text keyboard>useRef()</Text>
          </Paragraph>
          ).
        </p>
          <h2
           style={{
            textAlign: 'center',
            color:'#fff',
            fontSize:'26px',
            margin:'15px 0px',
          }}
          >
            Классовые компоненты
          </h2>
        <p className="content_wrapper">
          <ul>
            <li>Используют методы жизненных циклов.</li>
            <li>
              Для управления состоянием используют{' '}
              <Paragraph style={{ margin: '0', display: 'inline' }}>
                <Text keyboard>this.setState(state, [callback]).</Text>
              </Paragraph>
            </li>
            <li>Более сложные для понимания новичкам.</li>
            <li>
              Считаются устаревшими. Все еще встречаются в проектах. Команда
              React разработчиков рекомендует писать новый код на функциональных
              компонентах.
            </li>
          </ul>
        </p>
          <h2
           style={{
            textAlign: 'center',
            color:'#fff',
            fontSize:'26px',
            margin:'15px 0px',
          }}
          >
            Функциональные компоненты
          </h2>
        <p className="content_wrapper">
          <ul>
            <li>Используют Hooks (Хуки).</li>
            <li>Более простые для понимания.</li>
            <li>Более сложные для понимания новичкам.</li>
            <li>
              Конечный размер бандла приложения меньше чем на компонентах
              построенных с помощью классов.
            </li>
          </ul>
        </p>
        <p className="content_wrapper">
          Компонента должна себя вести как чистая функция. «Чистой» называется
          функция, которая: Для одинаковых входных данных всегда возвращает один
          результат. Не имеет побочных эффектов (то есть не изменяет внешние
          состояния). Не зависит от внешних состояний. Такие функции называют
          «чистыми», потому что они не меняют свои входные данные и предсказуемо
          возвращают один и тот же результат для одинаковых аргументов.
          <b>
            React-компоненты обязаны вести себя как чистые функции по отношению
            к своим пропсам.
          </b>
        </p>
      </div>
    </>
  );
};
